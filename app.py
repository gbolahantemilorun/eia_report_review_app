from dotenv import load_dotenv
import os
import streamlit as st
from PyPDF2 import PdfReader
from langchain.text_splitter import CharacterTextSplitter
from langchain.embeddings.openai import OpenAIEmbeddings
from langchain.vectorstores import FAISS
from langchain.chains.question_answering import load_qa_chain
from langchain.llms import OpenAI
import openai

# Load the env variables
load_dotenv(dotenv_path="/etc/secrets/.env")
openai.api_key = os.getenv("OPENAI_API_KEY")

# Create a title and header
st.title("EIA Report Review App")
st.header("Review EIA Report")

# User input
eia_report = st.file_uploader("Upload your EIA Report (PDF)", type="pdf")

# Check if the uploaded file is not none
if eia_report is not None:
    pdf_reader = PdfReader(eia_report)
    text = ""
    for page in pdf_reader.pages:
        text += page.extract_text()
        
    text_splitter = CharacterTextSplitter(
        separator="\n",
        chunk_size=1000,
        chunk_overlap=200,
        length_function=len
    )
    
    # Split the text into smaller chunks
    chunks = text_splitter.split_text(text)
    
    # Create an embedding
    embeddings = OpenAIEmbeddings()
    
    # Create a knowledge base
    knowledge_base = FAISS.from_texts(chunks, embeddings)
    
    query = st.text_input("Ask Questions about the EIA Report")
    
    if query is not None:
        # Search the knowledge base for documents related to the user's query
        docs = knowledge_base.similarity_search(query)
    
        # Initialize an OpenAI Model
        llm = OpenAI()
    
        # Load a question-answering chain using the OpenAI model
        chain = load_qa_chain(llm, chain_type="stuff")
        
        # Run the chain with the input document and user's question to generate a response
        response = chain.run(input_documents=docs, question=query)
        
        # Display the response generated by the AI Model
        st.success(response)
